/* This houses the inventory, which is just a 2D array, the first value holding the item ID and the second holding stack size.
   It also holds two functions which interact with the system while also checking if stuff is valid or not. */
// By Joshua Wang

class PlayerInventory
{
	// Not sure if something needs to go here.
}

/* Inserts an item into a specific slot, making sure we can, and possibly tossing out a different item. */
void insertItem (int index, int item)
{
	// If we're adding onto a stack and the limit has already been reached, we're just not letting them put in the item.
	if (item == inv[index, 0] && inv[index, 1] >= Items.getStackLimit(item))
	{
		return;
	}
	// Essentially throwing out an old item if it exists and doesn't match the item we're putting in.
	if (inv[index, 0] != 0 && inv[index, 0] != item)
	{
		discardItem(index);
	}
	// Making sure we have the right index, and incrementing by 1 (either there's nothing, or we're below stack limit)
	inv[index, 0] = item;
	inv[index, 1] += 1;
}

/* Just setting the inventory slot to have nothing with a stack size of nothing. */
void discardItem (int index)
{
	// Remember to actually have something throwing the stuff onto the ground.
	inv[index, 0] = 0;
	inv[index, 1] = 0;
}

// Not sure if this should go here or at the top with class PlayerInventory
/* Here, weâ€™re basically just initializing the inventory with 10 slots, each slot holding information on what item is stored
   inside and the stack size. */
int main()
{
	PlayerInventory inv[10][2];
}
